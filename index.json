[{"content":"\u003cp\u003eThis vulnerability also known as LFI. It occurs when file read feature has week security check algorithms. I\u0026rsquo;m gonna use BurSuite Community Edition. :zap:\u003c/p\u003e\n\u003ch2 id=\"what-is-path-traversal\"\u003eWhat is path traversal?\u003c/h2\u003e\n\u003cp\u003ePath traversal is also known as directory traversal. These vulnerabilities enable an attacker to read arbitrary files on the server that is running an application. This might include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eApplication code and data.\u003c/li\u003e\n\u003cli\u003eCredentials for back-end systems.\u003c/li\u003e\n\u003cli\u003eSensitive operating system files.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn some cases, an attacker might be able to write to arbitrary files on the server, allowing them to modify application data or behavior, and ultimately take full control of the server.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: In fact, not always random files, but some desired files can be read. So, I\u0026rsquo;m gonna try to explain bypass security validations and retrive files by manipulating app. Let\u0026rsquo;s jump in.\u003c/p\u003e\n\u003ch2 id=\"reading-arbitrary-files-via-path-traversal\"\u003eReading Arbitrary Files Via Path Traversal\u003c/h2\u003e\n\u003cp\u003eIn order to read files with a path traversal vulnerability, I first want to talk about where the vulnerability can be detected. This feature should be checked in web applications that already read a file (e.g. a product photo or a pdf visualization tool). Usually we try to call a file in our http request. You can think of it as a photo of a product on a shopping site.\u003c/p\u003e\n\u003cp\u003eAt this point, if a value for the file is specified in your HTTP request (which can be the name or id value of the file), we can try to call different files by manipulating this value.\u003c/p\u003e\n\u003cp\u003eIf the website uses client-side rendering, you may be making a direct request to the related content. If the website uses server-side rendering, you may not be able to make this request directly. In this case, you may not find the request you made to the photo in the proxy history. You can capture this request with the help of the inspector tool.\u003c/p\u003e\n\u003ch3 id=\"port-swigger-example\"\u003ePort Swigger Example\u003c/h3\u003e\n\u003cp\u003eImagine a shopping application that displays images of items for sale. This might load an image using the following HTML:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026lt;img src=\u0026#34;/loadImage?filename=218.png\u0026#34;\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe loadImage URL takes a filename parameter and returns the contents of the specified file. The image files are stored on disk in the location /var/www/images/. To return an image, the application appends the requested filename to this base directory and uses a filesystem API to read the contents of the file. In other words, the application reads from the following file path:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e/var/www/images/218.png\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis application implements no defenses against path traversal attacks. As a result, an attacker can request the following URL to retrieve the /etc/passwd file from the server\u0026rsquo;s filesystem:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://insecure-website.com/loadImage?filename=../../../etc/passwd\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis causes the application to read from the following file path:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e/var/www/images/../../../etc/passwd\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe sequence ../ is valid within a file path, and means to step up one level in the directory structure. The three consecutive ../ sequences step up from /var/www/images/ to the filesystem root, and so the file that is actually read is:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e/etc/passwd\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOn Unix-based operating systems, this is a standard file containing details of the users that are registered on the server, but an attacker could retrieve other arbitrary files using the same technique.\u003c/p\u003e\n\u003cp\u003eOn Windows, both ../ and ..\\ are valid directory traversal sequences. The following is an example of an equivalent attack against a Windows-based server:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://insecure-website.com/loadImage?filename=..\\..\\..\\windows\\win.ini\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"lab-file-path-traversal-simple-case\"\u003eLab: File Path Traversal Simple Case\u003c/h2\u003e\n\u003cp\u003eThis lab is the most primitive version of Path Traversal. Let\u0026rsquo;s see what\u0026rsquo;s going on.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: This lab contains a path traversal vulnerability in the display of product images. To solve the lab, retrieve the contents of the \u003cstrong\u003e/etc/passwd\u003c/strong\u003e file.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../img.png\" alt=\"img.png\"\u003e\u003c/p\u003e\n\u003cp\u003eI see primitive shopping app which has only product info and photos. After surfing for 2 min, I\u0026rsquo;m inspecting proxy history on burp. Actually I couldn\u0026rsquo;t see any request for specific file. Then I make a desicion to directly get request to address of one of the photos(Right click -\u0026gt; copy image address). After intercepting request I send request by editing filename param.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../img_1.png\" alt=\"img_1.png\"\u003e\u003c/p\u003e\n\u003cp\u003eAs you can see, I just give a couple backpath reff to param\u0026hellip; But As I said it\u0026rsquo;s just simple case. Let\u0026rsquo;s see how to bypass security checks by also coding them :computer:\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"lab-file-path-traversal-traversal-sequences-blocked-with-absolute-path-bypass\"\u003eLab: File Path Traversal, Traversal Sequences Blocked With Absolute Path Bypass\u003c/h2\u003e\n\u003cp\u003eThis lab contains a path traversal vulnerability in the display of product images.\nThe application blocks traversal sequences but treats the supplied filename as being relative to a default working directory.\u003c/p\u003e\n\u003cp\u003eTo solve the lab, retrieve the contents of the \u003ccode\u003e/etc/passwd\u003c/code\u003e file.\nFirst of all, an example about relative and absolute path:\n\u003cimg src=\"../path.png\" alt=\"img.png\"\u003e\u003c/p\u003e\n\u003cp\u003eIn some cases, devoloper might know the attack vector and could be developed a feature to block path operations. Like stripping consecutive dots. Let\u0026rsquo;s code a route including this feature.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e fastapi \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e FastAPI, HTTPException\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e fastapi.responses \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e FileResponse\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e pathlib \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Path\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eapp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FastAPI()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eBASE_DIR \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Path(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/path/to/your/files\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eresolve()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@app.get\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/download\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edownload_file\u003c/span\u003e(file: str):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;..\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e file:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eraise\u003c/span\u003e HTTPException(status_code\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e400\u003c/span\u003e, detail\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Invalid file path\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    filepath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Path(file)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eresolve()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e str(filepath)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(str(BASE_DIR)) \u003cspan style=\"color:#f92672\"\u003eand\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e filepath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eis_absolute():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eraise\u003c/span\u003e HTTPException(status_code\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e400\u003c/span\u003e, detail\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Invalid file path\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e filepath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eexists():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eraise\u003c/span\u003e HTTPException(status_code\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e404\u003c/span\u003e, detail\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;File not found\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e FileResponse(filepath, filename\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efilepath\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e uvicorn\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    uvicorn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erun(app, host\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0.0.0.0\u0026#34;\u003c/span\u003e, port\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8000\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn fact, this is not enough. We will see this in more detail in the next steps. So how do we go to the back directories in this case?\u003c/p\u003e\n\u003cp\u003eActually we don\u0026rsquo;t need to jump to back directories. We can use absolute path to reference the directory path from the root directory. Indeed, /etc/passwd and ../\u0026hellip;/\u0026hellip;/\u0026hellip;/\u0026hellip;/etc/passwd reference the same files. Let\u0026rsquo;s see port swigger lab.\u003c/p\u003e\n\u003cp\u003eThis lab contains same shopping app so I inspected the request of image url and sent it to repeater.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../img-relative.png\" alt=\"img.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWhen I tried to request with random filename param(wich doesn\u0026rsquo;t exist), it returned same response. Of course it\u0026rsquo;s blind shot, you know, we can\u0026rsquo;t know the security algorithm. But we can guess. We gonna talk about other well known missconfigured algorithms. I just tried with full/absolute path of file. And gothca!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../img-absolute.png\" alt=\"img.png\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"lab-file-path-traversal-traversal-sequences-stripped-non-recursively\"\u003eLab: File Path Traversal, Traversal Sequences Stripped Non-Recursively\u003c/h2\u003e\n\u003cp\u003eYou might have already seen that payload of attack. It\u0026rsquo;s very common. But before the lab we gonna focus code part. I used Python/FastAPI for previous lab. Let\u0026rsquo;s use another in order to be able to analyze lang-dependent.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexpress\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erequire\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;express\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erequire\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;path\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efs\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erequire\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;fs\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexpress\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eBASE_DIR\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eresolve\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/your/files\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/download\u0026#39;\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eisAbsolute\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e400\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003esend\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Absolute paths are not allowed\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Replace ../ with null string\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereplace\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e/\\.\\.\\//g\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efilePath\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eresolve\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eBASE_DIR\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efilePath\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estartsWith\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eBASE_DIR\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e400\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003esend\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Invalid file path\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efs\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eexistsSync\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efilePath\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatus\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e404\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003esend\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;File not found\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esendFile\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efilePath\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elisten\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3000\u003c/span\u003e, () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Server is running on port 3000\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs you can see, developer can clear ../ part of input by regex. Regex is used to edit,remove or validate regular expressions. It uses NFA \u0026amp; DFA structs so it\u0026rsquo;s easier and more reliable way to do this manually. Just simplify the security part. Some how, we need to bypass that feature. We need, in other word inject something. Let\u0026rsquo;s code security part.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e re\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eis_valid_path\u003c/span\u003e(file_path):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e file_path\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estartswith(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;noway\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e#return False # ATM file path doesn\u0026#39;t supposed to start with /.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cleaned_path \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e re\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esub(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\.\\./\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e, file_path) \u003cspan style=\"color:#75715e\"\u003e# regex part to remove ../\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(cleaned_path)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efilePath \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e input(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Filepath= \u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eis_valid_path(filePath)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"../img-func.png\" alt=\"img.png\"\u003e\u003c/p\u003e\n\u003cp\u003eUsing double slash or using \u003cstrong\u003e\u0026hellip;.//\u003c/strong\u003e can be used for escape.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInput ../../../../etc/passwd\n\n    -\u0026gt; ../../../../[etc/passwd] = etc/passwd\n\nInput ../../../..//etc/passwd\n    -\u0026gt; ../../../../[/etc/passwd] = /etc/passwd\n\nInput ....//....//....//....//etc/passwd\n    -\u0026gt; ..[../]/ ..[../] /..[../] /..[../] /etc/passwd = ../../../../etc/passwd\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt must be implemented recursively. After all trimmed input also might be malicious payload. Because this security method is predictable and wellknown. Let\u0026rsquo;s jump the lab.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e This lab contains a path traversal vulnerability in the display of product images.\nThe application strips path traversal sequences from the user-supplied filename before using it.\nTo solve the lab, retrieve the contents of the \u003ccode\u003e/etc/passwd\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eI intercept the request again. I used the payload for filename parameter.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../img-recursive.png\" alt=\"img.png\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"lab-file-path-traversal-traversal-sequences-stripped-with-superfluous-url-decode\"\u003eLab: File Path Traversal, Traversal Sequences Stripped With Superfluous URL-Decode\u003c/h2\u003e\n\u003cp\u003eWhen filename parameter is a part of url, like GET requests or multipart/form-data, web servers such as nginx may strip directory traversal sequences before proxying request through application.\u003c/p\u003e\n\u003cp\u003eThis is very important. Because most likely in real world examples, a reverse proxy, api gateway, loadbalancer, etc. will handle your http request up in the front. Such structures are almost mandatory in production environments for better logging, traffic management and multi-tier vlan setup. This means that most of the time we need to url-encode our payloads and in some cases even double encode them.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../img-encode.png\" alt=\"img.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e This lab contains a path traversal vulnerability in the display of product images.\nThe application blocks input containing path traversal sequences. It then performs a URL-decode of the input before using it.\nTo solve the lab, retrieve the contents of the /etc/passwd file.\u003c/p\u003e\n\u003cp\u003eAs always we have done, I catch the request which related to images. Then I tried url-encode the payload. It\u0026rsquo;s easy to url-encode on burp. Just select your payload and right click on it. You will be able to URL-\u0026gt; encode all etc.\nI tought, I couldn\u0026rsquo;t encode correctly first. But I remember web server might uses double encode and decode. So I used double encode.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../img-double.png\" alt=\"img.png\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"lab-file-path-traversal-validation-of-start-of-path\"\u003eLab: File Path Traversal, Validation Of Start Of Path\u003c/h2\u003e\n\u003cp\u003eSometimes user might be forced to request by basedir of image path. Like \u003cstrong\u003e/var/www/images\u003c/strong\u003e. And backend may only validate your input when you use basedir. Maybe the filename paramter should definitely start with /var/www/images. All other requests may return 404.\nI used FastAPI and NodeJS. Also go-fiber is good for our context. It\u0026rsquo;s really nice to use go if you are interested in security.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;strings\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/gofiber/fiber/v2\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efiber\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNew\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUse\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efiber\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCtx\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eerror\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003efilename\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eQuery\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;filename\u0026#34;\u003c/span\u003e) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003ebaseDir\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/var/www/images\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eHasPrefix\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efilename\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ebaseDir\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efiber\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewError\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efiber\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStatusForbidden\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Invalid filename\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSendFile\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efilename\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eapp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eListen\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:3000\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eActually, I wanted to use fiber v4. But it has been a while to code by golang. Well, I guess I\u0026rsquo;m a little rusty.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../img-basedir.png\" alt=\"img.png\"\u003e\u003c/p\u003e\n\u003cp\u003eWe can bypass the basedir check by adding path traversal payload at the end of payload. At this point we need to think about \u0026ldquo;if developer may check start of input path, also can validate file extension. Maybe developer check filename.[PNG]\u0026rdquo;\nWe gonna discuss about that on next labs.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"lab-file-path-traversal-validation-of-file-extension-with-null-byte-bypass\"\u003eLab: File Path Traversal, Validation Of File Extension With Null Byte Bypass\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e This lab contains a path traversal vulnerability in the display of product images. The application validates that the supplied filename ends with the expected file extension. To solve the lab, retrieve the contents of the /etc/passwd file.\u003c/p\u003e\n\u003cp\u003eI actually made a point of this in the last lab thread. Application could force us to request file by specific file extension. When we try to retrieve.\nThink about that, you are trying to fetch files but app enforces to you by specific extension. You can\u0026rsquo;t fetch like /etc/passwd.png right.\nWe need to bypass that. If you are familiar with sql injection we mostly use comment to overcome rest of the query. For path traversal we can use null byte %00.\nLet\u0026rsquo;s jump in.\u003c/p\u003e\n\u003cp\u003eLike other labs we see a shopping application. I\u0026rsquo;m fetching product image request. Also I realised, system use server side rendering so I can\u0026rsquo;t find the request on proxy history. I had to intercept is manually.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../img-null.png\" alt=\"img.png\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"how-to-prevent-path-traversal-attacks\"\u003eHow To Prevent Path Traversal Attacks\u003c/h2\u003e\n\u003cp\u003eThe most effective way to prevent path traversal vulnerabilities is to avoid passing user-supplied input to filesystem APIs altogether.\nIf you can\u0026rsquo;t avoid passing user-supplied input to filesystem APIs, we recommend using two layers of defense to prevent attacks:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eValidate the user input before processing it. Ideally, compare the user input with a whitelist of permitted values. If that isn\u0026rsquo;t possible, verify that the input contains only permitted content, such as alphanumeric characters only.\u003c/li\u003e\n\u003cli\u003eAfter validating the supplied input, append the input to the base directory and use a platform filesystem API to canonicalize the path. Verify that the canonicalized path starts with the expected base directory.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eFile\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFile\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eBASE_DIRECTORY\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003euserInput\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efile\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003egetCanonicalPath\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003estartsWith\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eBASE_DIRECTORY\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// process file\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe main point was file reading ops. But also we need to be carefull about i/o operations on disk. When we save a file or reading a file, if get a param which related to the file we need robust validations. We need to rename file and while reading ops, we have to validate request parameters. I\u0026rsquo;m gona code a secure file read and file write endpoint by fastapi.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e fastapi \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e FastAPI, HTTPException, Path\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e pathlib \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Path \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e FilePath\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eapp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e FastAPI()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@app.get\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/read-file/{file_path:path}\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eread_file\u003c/span\u003e(file_path: str \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Path(\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e, regex\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;^[a-zA-Z0-9_/\\.]+$\u0026#34;\u003c/span\u003e)):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Check if the file path is within allowed directory or handle as needed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    base_path \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/allowed_directory/\u0026#39;\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e# Replace with your allowed directory\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    full_path \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e base_path \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e file_path\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Validate if the file exists and is a file (not directory)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e FilePath(full_path)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eis_file():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eraise\u003c/span\u003e HTTPException(status_code\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e404\u003c/span\u003e, detail\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;File not found\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Read and return the file content\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(full_path, mode\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e, encoding\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf-8\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e file:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        file_content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e file\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;file_content\u0026#34;\u003c/span\u003e: file_content}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e@app.post\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/save-file/\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esave_file\u003c/span\u003e(file: UploadFile \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e File(\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Generate a unique filename to prevent overwriting existing files\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    file_extension \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Path(file\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efilename)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esuffix\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    unique_filename \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003euuid4()\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ehex\u003cspan style=\"color:#e6db74\"\u003e}{\u003c/span\u003efile_extension\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Define your upload directory\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    upload_directory \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/upload_directory/\u0026#39;\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e# Replace with your upload directory\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# Save the file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    file_path \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e upload_directory \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e unique_filename\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(file_path, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;wb\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e file_object:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        file_object\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(file\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efile\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;file_path\u0026#34;\u003c/span\u003e: file_path}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"end-notes\"\u003eEnd Notes\u003c/h2\u003e\n\u003cp\u003eI tried to add more info and code examples. Also I used community edition. Feel free to contact by any source for any question and recommend.\u003c/p\u003e\n\u003ch3 id=\"references\"\u003eReferences\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://portswigger.net/web-security/file-path-traversal\"\u003ehttps://portswigger.net/web-security/file-path-traversal\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","description":"Path Traversal lab solutions.","image":"/directory-traversal.svg","permalink":"http://localhost:1313/blogs/portswigger-path-traversal/","title":"PortSwigger Directory Traversal"}]